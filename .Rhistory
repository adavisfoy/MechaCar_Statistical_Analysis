mtcars_filt <- mtcars[,c("hp","cyl")] #filter columns from mtcars dataset
mtcars_filt$cyl <- factor(mtcars_filt$cyl) #convert numeric column to factor
aov(hp ~ cyl,data=mtcars_filt) #compare means across multiple levels
summary(aov(hp ~ cyl,data=mtcars_filt)) #wrap aov() function in a summary() to retrieve p-values
head(mtcars) # print head of dataset
plt <- ggplot(mtcars,aes(x=hp,y=qsec)) #import dataset into ggplot2
plt + geom_point() #create scatter plot
cor(mtcars$hp,mtcars$qsec) #calculate correlation coefficient
used_cars <- read.csv('used_car_data.csv',stringsAsFactors = F) #read in dataset
head(used_cars)
plt <- ggplot(used_cars,aes(x=Miles_Driven,y=Selling_Price)) #import dataset into ggplot2
plt + geom_point() #create a scatter plot
cor(used_cars$Miles_Driven,used_cars$Selling_Price) #calculate correlation coefficient
used_matrix <- as.matrix(used_cars[,c("Selling_Price","Present_Price","Miles_Driven")]) #convert data frame into numeric matrix
cor(used_matrix)
library(ggplot2)
mtcars_filt <- mtcars[,c("hp","cyl")] #filter columns from mtcars dataset
mtcars_filt$cyl <- factor(mtcars_filt$cyl) #convert numeric column to factor
aov(hp ~ cyl,data=mtcars_filt) #compare means across multiple levels
summary(aov(hp ~ cyl,data=mtcars_filt)) #wrap aov() function in a summary() to retrieve p-values
head(mtcars) # print head of dataset
plt <- ggplot(mtcars,aes(x=hp,y=qsec)) #import dataset into ggplot2
plt + geom_point() #create scatter plot
cor(mtcars$hp,mtcars$qsec) #calculate correlation coefficient
used_cars <- read.csv('used_car_data.csv',stringsAsFactors = F) #read in dataset
head(used_cars)
plt <- ggplot(used_cars,aes(x=Miles_Driven,y=Selling_Price)) #import dataset into ggplot2
plt + geom_point() #create a scatter plot
cor(used_cars$Miles_Driven,used_cars$Selling_Price) #calculate correlation coefficient
used_matrix <- as.matrix(used_cars[,c("Selling_Price","Present_Price","Miles_Driven")]) #convert data frame into numeric matrix
cor(used_matrix)
mtcars_filt <- mtcars[,c("hp","cyl")] #filter columns from mtcars dataset
mtcars_filt$cyl <- factor(mtcars_filt$cyl) #convert numeric column to factor
aov(hp ~ cyl,data=mtcars_filt) #compare means across multiple levels
summary(aov(hp ~ cyl,data=mtcars_filt)) #wrap aov() function in a summary() to retrieve p-values
head(mtcars) # print head of dataset
plt <- ggplot(mtcars,aes(x=hp,y=qsec)) #import dataset into ggplot2
plt + geom_point() #create scatter plot
cor(mtcars$hp,mtcars$qsec) #calculate correlation coefficient
used_cars <- read.csv('used_car_data.csv',stringsAsFactors = F) #read in dataset
head(used_cars)
plt <- ggplot(used_cars,aes(x=Miles_Driven,y=Selling_Price)) #import dataset into ggplot2
plt + geom_point() #create a scatter plot
cor(used_cars$Miles_Driven,used_cars$Selling_Price) #calculate correlation coefficient
used_matrix <- as.matrix(used_cars[,c("Selling_Price","Present_Price","Miles_Driven")]) #convert data frame into numeric matrix
cor(used_matrix)
lm(qsec ~ hp,mtcars) #create linear model
summary(lm(qsec~hp,mtcars)) #summarize linear model
model <- lm(qsec ~ hp,mtcars) #create linear model
yvals <- model$coefficients['hp']*mtcars$hp +
model$coefficients['(Intercept)'] #determine y-axis values from linear model
plt <- ggplot(mtcars,aes(x=hp,y=qsec)) #import dataset into ggplot2
plt + geom_point() + geom_line(aes(y=yvals), color = "red") #plot scatter and linear model
lm(qsec ~ mpg + disp + drat + wt + hp,data=mtcars) #generate multiple linear regression model
summary(lm(qsec ~ mpg + disp + drat + wt + hp,data=mtcars)) #generate summary statistics
table(mpg$class,mpg$year) #generate contingency table
tbl <- table(mpg$class,mpg$year) #generate contingency table
chisq.test(tbl) #compare categorical distributions
setwd("~/1_GitHub_Repos/MechaCar_Statistical_Analysis")
?read.csv()
?lm()
library(dplyr)
mecha_cars <- read.csv('MechaCar_mpg.csv', header = TRUE) #read in dataset
lm(mpg ~ vehicle_length,mecha_cars) #create linear model
lm(mpg ~ vehicle_length + vehicle_weight + spoiler_angle + ground_clearance + AWD,
data=mecha_cars) #create multiple linear regression model
summary(lm(mpg ~ vehicle_length + vehicle_weight + spoiler_angle + ground_clearance + AWD,
data=mecha_cars)) #summarize linear model
susp_coils <- read.csv('Suspension_Coil.csv', header = TRUE) #read in dataset
?summarize()
total_summary <- summarize(susp_coils$'PSI', .group=NULL)
total_summary <- susp_coils %>% summarize(PSI, .group=NULL)
total_summary <- summarize(susp_coils$'PSI', .group=NULL)
total_summary <- summarize(susp_coils, PSI)
summarize(susp_coils, PSI)
total_summary <- susp_coils %>%
summarize(mean_PSI=mean(PSI))
View(total_summary)
total_summary <- susp_coils %>%
summarize(Mean=mean(PSI), Median=median(PSI), Variance=variance(PSI), SD=std(PSI))
total_summary <- susp_coils %>%
summarize(Mean=mean(PSI), Median=median(PSI), Variance=var(PSI), SD=sd(PSI))
View(total_summary)
lot_summary <- susp_coils %>%
group_by(Manufacturing_Lot) %>%
summarize(Mean=mean(PSI), Median=median(PSI), Variance=var(PSI), SD=sd(PSI))
View(lot_summary)
View(susp_coils)
?t.test()
t.test(total_summary$Mean, mu=1500)
t.test(susp_coils$PSI, mu=1500)
?subset()
t.test(susp_coils$PSI, mu=1500, subset(susp_coils$Manufacturing_Lot = 'Lot1'))
t.test(susp_coils$PSI, mu=1500, subset(susp_coils$Manufacturing_Lot == 'Lot1'))
t.test(susp_coils$PSI, mu=1500, subset.susp_coils$Manufacturing_Lot == 'Lot1')
t.test(susp_coils$PSI, mu=1500, subset.Manufacturing_Lot == 'Lot1')
t.test(susp_coils$PSI, mu=1500, subset.susp_coils.Manufacturing_Lot == 'Lot1')
t.test(susp_coils$PSI, mu=1500, subset = Manufacturing_Lot == 'Lot1')
t.test(susp_coils$PSI, mu=1500, subset = Manufacturing_Lot == 'Lot2')
t.test(susp_coils$PSI, mu=1500, subset = Manufacturing_Lot == 'Lot3')
t.test(subset(susp_coils$Manufacturing_Lot == 'Lot1')$PSI, mu=1500)
t.test(subset(susp_coils$PSI, Manufacturing_Lot == 'Lot1') mu=1500)
t.test(susp_coils$PSI, mu = 1500, subset(Manufacturing_Lot == 'Lot1'))
t.test(susp_coils$PSI, mu = 1500, subset(susp_coils$Manufacturing_Lot == 'Lot1'))
t.test(subset(susp_coils, Manufacturing_Lot == 'Lot1')$PSI, mu=1500)
t.test(susp_coils$PSI, mu = 1500, subset(susp_coils$Manufacturing_Lot == 'Lot1'))
t.test(susp_coils$PSI, mu=1500)
t.test(subset(susp_coils, Manufacturing_Lot == 'Lot1')$PSI, mu=1500)
t.test(subset(susp_coils, Manufacturing_Lot == 'Lot2')$PSI, mu=1500)
t.test(subset(susp_coils, Manufacturing_Lot == 'Lot3')$PSI, mu=1500)
